{"ast":null,"code":"import { useEffect, useState } from \"react\";\nexport const useFetch = url => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true\n  });\n  useEffect(() => {\n    setState(state => ({\n      data: state.data,\n      loading: true\n    })); //? Ici ont est obliger d'utiliser une IIFE(Immediately Invoked Function Expression)\n    //! C/ nous somme dans un useEffect Hooks.\n\n    (async () => {\n      setTimeout;\n      let res = await fetch(url);\n      let value = await res.text();\n      setState({\n        data: value,\n        loading: false\n      });\n    })();\n  }, [url, setState]);\n  return state;\n};","map":{"version":3,"sources":["/home/user/Bureau/react-ben/ben-awad-hooks/use-ref/src/useFetch.jsx"],"names":["useEffect","useState","useFetch","url","state","setState","data","loading","setTimeout","res","fetch","value","text"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAmC,OAAnC;AAEA,OAAO,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE;AAAvB,GAAD,CAAlC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,QAAQ,CAACD,KAAK,KAAK;AAACE,MAAAA,IAAI,EAAGF,KAAK,CAACE,IAAd;AAAoBC,MAAAA,OAAO,EAAE;AAA7B,KAAL,CAAN,CAAR,CADY,CAEZ;AACA;;AACA,KAAC,YAAY;AACTC,MAAAA,UAAU;AACV,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAACP,GAAD,CAArB;AACA,UAAIQ,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAlB;AACAP,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEK,KAAR;AAAeJ,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACH,KALD;AAMC,GAVI,EAUF,CAACJ,GAAD,EAAME,QAAN,CAVE,CAAT;AAWA,SAAOD,KAAP;AACH,CAdM","sourcesContent":["import {useEffect, useState } from \"react\";\n\t\nexport const useFetch = url => {\n    const [state, setState] = useState({ data: null, loading: true});\n    useEffect(() => {\n        setState(state => ({data : state.data, loading: true}));\n        //? Ici ont est obliger d'utiliser une IIFE(Immediately Invoked Function Expression)\n        //! C/ nous somme dans un useEffect Hooks.\n        (async () => {\n            setTimeout\n            let res = await fetch(url);\n            let value = await res.text();\n            setState({ data: value, loading: false });\n        })();\n        }, [url, setState]);\n    return state;\n}"]},"metadata":{},"sourceType":"module"}